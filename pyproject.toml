[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "modern_python"
version = "0.0.1"
description = "A template for developing production-ready Python applications."
authors = [
  { name = "Miguel Villa Floran", email = "miguel.villafloran@gmail.com" },
]
requires-python = ">=3.12,<3.13"
readme = "README.md"
license = { file = "LICENSE" }

dependencies = ["utils", "core", "typer>=0.12.5"]

[tool.uv.sources]
utils = { workspace = true }
core = { workspace = true }

[tool.uv.workspace]
members = ["shared/*", "src/*"]

[dependency-groups]
dev = [
  "pre-commit>=4.1.0",
  "ipykernel>=6.29.5",
  "pytest>=8.3.2",
  "deptry>=0.23.0",
  "mypy>=1.15.0",
  "pytest-cov>=6.0.0",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["shared", "src"]

[tool.mypy]
exclude = "^.tmp/"
ignore_missing_imports = true

[tool.bandit]
skips = ['B101']

[tool.ruff]

extend-exclude = [
  "__pycache__",
  "docs",
  "site",
  ".eggs",
  ".git",
  ".venv",
  "build",
  "dist",
  "notebooks",
  ".cache",
]
line-length = 120

[tool.ruff.lint]
ignore = [
  "E402",   # Module level import not at top of file
  "E501",   # Line too long
  "E203",   # Whitespace before ':' -> conflicts with black
  "D401",   # First line should be in imperative mood
  "RET504", # Unnecessary variable assignment before return statement
  "RET505", # Unnecessary elif after return statement
  "SIM102", # Use a single if-statement instead of nested if-statements
  "SIM117", # Merge with statements for context managers that have same scope
  "SIM118", # Checks for key-existence checks against dict.keys() calls
]
select = ["E", "F", "I"]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"] # Unused import

[tool.ruff.lint.isort]
known-first-party = ["modern_python", "core"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 30

[tool.pytest.ini_options]
cache_dir = ".pytest_cache"
pythonpath = [".", "scripts", "src"]
